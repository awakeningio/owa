@startuml

!include styles.puml

namespace nodejs.owa {
  class OWAController {
    Top level entity for controlling everything.
    Entry point, starts all sub-controllers.
    \n
    Main state store for OWA app
    redux.Store owaStore
    \n
    A separate redux state store for the Ableton Link state.  It changes
    very frequently and thus does not need to be in the same store.
    redux.Store linkStore

    inputController
    soundController
  }
  OWAController *-- redux.Store

  class SimulatorInputController {
    
    Converts messages from simulator UI into
    dispatched actions.

    oscActionListener
    store
  }
  OWAController o-- SimulatorInputController
  SIMULATOR_OSC_IN ()-- SimulatorInputController
  SimulatorInputController *-- OSCActionListener
  SimulatorInputController *-- redux.Store
  
  /'class ArduinoInputController {'/
    /'Converts arduino inputs to dispatched actions.'/

    /'serialport.SerialPort arduinoPort'/
    /'..'/
    /'+ handleButtonMessage(data)'/
  /'}'/
  /'OWAController o-- ArduinoInputController'/
  class OSCActionListener {
    Forward actions from osc.js to a redux state store.

    store
    oscSocket
  }
  OSCActionListener *-- redux.Store

  class AbletonLinkController {
    Creates an Ableton Link client and forwards the state to the
    store.

    linkStore
  }
  OWAController *-- AbletonLinkController
  AbletonLinkController *-- redux.Store

  class SoundController {
    Forwards state changes to SuperCollider and forwards dispatches from SC
    to the store.

    OSCActionListener actionListener
    store
    linkStore
  }
  OWAController *-- SoundController
  SoundController *-- OSCActionListener
  SoundController *-- redux.Store
  SoundController "owa.api" -down-> quarks.owa.OWAController

  /'class OSCActionDispatcher {'/
    /'redux middleware to dispatch actions via osc.js'/

    /'oscSocket'/
  /'}'/

  namespace simulator {
    class OWAUIApp {
      Entry point for the GUI
    }
    OWAUIApp "SIMULATOR_OSC_IN" --> nodejs.owa.SimulatorInputController
  }

}

package quarks.owa {
  class OWAController {
    StateStore owaStateStore
    StateStore linkStateStore
    SessionTimingController sessionTimingController
    ReduxAbletonTempoClockController clockController
  }
  OWAController *-- quarks.supercollider_redux.StateStore
  OWAController *-- quarks.supercollider_redux.ReduxAbletonTempoClockController
  owa.api ()- OWAController

  class SessionTimingController {
    Handles scheduling the timing to transition from one phase to the
    next using the master clock.
    
    ReduxAbletonTempoClockController clockController
    StateStore linkStore
  }
  OWAController *-- SessionTimingController
  SessionTimingController *-- quarks.supercollider_redux.ReduxAbletonTempoClockController
  SessionTimingController *-- quarks.supercollider_redux.StateStore

  class LevelTimingController {
    Handles the scheduling of playback within one level.  When playingState
    changes, start changing sequencer state appropriately.  Queue sequencer
    start, when sequencer starts queue sequencer stop and next sequencer start,
    etc.

    ReduxAbletonTempoClockController clockController
    StateStore store
  }
  OWAController *-- LevelTimingController
  LevelTimingController *-- quarks.supercollider_redux.ReduxAbletonTempoClockController
  LevelTimingController *-- quarks.supercollider_redux.StateStore
}


@enduml
