@startuml

!include styles.puml

namespace nodejs.owa {
  class OWAController {
    Top level entity for controlling everything.
    Entry point, starts all sub-controllers.

    OWAStateStore store
    inputController
    soundController
  }

  class SimulatorInputController {
    
    Converts messages from simulator UI into
    dispatched actions.

    oscActionListener
  }
  OWAController o-- SimulatorInputController
  
  /'class ArduinoInputController {'/
    /'Converts arduino inputs to dispatched actions.'/

    /'serialport.SerialPort arduinoPort'/
    /'..'/
    /'+ handleButtonMessage(data)'/
  /'}'/
  /'OWAController o-- ArduinoInputController'/
  
  class owaStateStore {
    Main state store for OWA app

    See data model for state tree.
  }

  class linkStateStore {
    A separate Redux state store for the Ableton Link state.  It changes
    very frequently and thus does not need to be in the same store.

    See data model for tree
  }

  class OSCActionListener {
    Forward actions from osc.js to a Redux state store.

    store
    oscSocket
  }

  class AbletonLinkController
  OWAController *-- AbletonLinkController
  class SoundController {
    Forwards state changes to SuperCollider and forwards dispatches from SC
    to the store.

    OSCActionListener actionListener
  }
  OWAController *-- SoundController
  SoundController *-- OSCActionListener

  /'class OSCActionDispatcher {'/
    /'Redux middleware to dispatch actions via osc.js'/

    /'oscSocket'/
  /'}'/

  namespace simulator {
    class OWAUIApp {
      Entry point for the GUI

    }
  }

}

package quarks.owa {
  class OWAController {
    StateStore owaStore
    StateStore linkStore
    SessionTimingController sessionTimingController
    ReduxAbletonTempoClockController clockController
  }
  OWAController *-- quarks.supercollider_redux.StateStore
  OWAController *-- quarks.supercollider_redux.ReduxAbletonTempoClockController

  class SessionTimingController {
    Handles scheduling the timing to transition from one phase to the
    next using the master clock.
    
    ReduxAbletonTempoClockController clockController
  }
  OWAController *-- SessionTimingController
  SessionTimingController *-- quarks.supercollider_redux.ReduxAbletonTempoClockController

  class LevelTimingController {
    Handles the scheduling of playback within one level.  When playingState
    changes, start changing sequencer state appropriately.  Queue sequencer
    start, when sequencer starts queue sequencer stop and next sequencer start,
    etc.

    ReduxAbletonTempoClockController clockController
  }
  OWAController *-- LevelTimingController
  LevelTimingController *-- quarks.supercollider_redux.ReduxAbletonTempoClockController
}


@enduml
