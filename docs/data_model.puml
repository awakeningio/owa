@startuml

!include styles.iuml

object SESSION_PHASES { 
  IDLE
  TRANS_10
  PLAYING_10
  TRANS_8
  PLAYING_8
  TRANS_6
  PLAYING_6
  TRANS_4
  PLAYING_4
  ADVICE_READY
  TRANS_ADVICE
  PLAYING_ADVICE
  TRANS_IDLE
}

object LEVEL_PLAYBACK_TYPE {
  SIMULTANEOUS,
  SEQUENTIAL 
}

object CONNECTION_STATUS {
  DISCONNECTED,
  CONNECTING,
  CONNECTED
}

object SONG_IDS {
  "spinny_pluck",
  "eminator"
}

object state {  
  Enum SONG_IDS songId
  float tempo
  Enum CONNECTION_STATUS fadecandyConnection
  bool soundReady
  Object sessionPhaseDurations
  inactivityTimeoutStartTime
  Enum SESSION_PHASES sessionPhase
  segments segments{}
  levels levels{}
  SequencerState sequencers{}
  IdlePlayerState idlePlayer{}
  segmentId|false firstSegmentPressed
}
state *-- SESSION_PHASES
state *-- CONNECTION_STATUS
state *-- OWA_SONG_IDS

object levels {
  LevelState byId{}
  string allIds[]
}
state *-- levels
levels *-- LevelState

object segments {
  SegmentState byId{}
  string allIds[]
}
state *-- segments
segments *-- SegmentState

object SegmentState {
  levelId
  segmentIndex
  segmentId
  sequencerId
  lastButtonPressTime
}

object LevelState {
  string levelId
  Enum LEVEL_PLAYBACK_TYPE playbackType
  numSegments
}
LevelState *-- LEVEL_PLAYBACK_TYPE

object SequencerState {
  Awakening sequencers object

  sequencerId  
  type
  clockOffsetSeconds
  beat
  nextBeat
  nextTime
  numBeats
  playingState
  isReady
  playQuant
  stopQuant
  event


  Plus our own added state:
  phaseProps
}
state *-- SequencerState

object IdlePlayerState {
  bufName,
  playingState,
  gate
}
state *-- IdlePlayerState


@enduml
