@startuml

!include styles.iuml

object state {  
  bool soundReady
  bool lightsReady
  tempo
  fadecandyConnection
  Enum SESSION_PHASES sessionPhase
  sessionPhaseDurations
  inactivityTimeoutStartTime
  \n
  levels levels{}
  segments segments{}
  SequencerState sequencers{}
  IdlePlayerState idlePlayer{}
  bool level4Ready
  bool level2Ready
  bool revealReady
  bool firstSegmentPressed
}

object levels {
  LevelState byId{}
  string allIds[]
}
state *-- levels
levels *-- LevelState

object segments {
  SegmentState byId{}
  string allIds[]
}
state *-- segments
segments *-- SegmentState

object SESSION_PHASES { 
IDLE
TRANS_10
PLAYING_10
TRANS_8
PLAYING_8
TRANS_6
PLAYING_6
TRANS_4
PLAYING_4
ADVICE_READY
TRANS_ADVICE
PLAYING_ADVICE
TRANS_IDLE
}

object SegmentState {
  string segmentId
  string sequencerId
  \n
  If this segment is currently in playback.
  PLAYING_STATES playingState
}

object LevelState {
  string levelId
  \n
  Segment ordering (segmentPlaybackIndex is an index into this list).
  string segmentPlaybackOrder[];
  \n
  Index of the active segment on this level or false if the level is 
  inactive.
  int activeSegmentIndex
  \n
  Id of the active sequencer.  This also needs to be stored because the
  playback order may change and the segmentPlaybackIndex may no longer point
  to the currently playing sequencer
  string activeSegmentId
}

object SequencerState {
  Awakening sequencers object
  
  name
  clockOffsetSeconds
  beat
  nextBeat
  numBeats
  playingState
  isReady
  playQuant
  stopQuant
}
state *-- SequencerState

object IdlePlayerState {
  bufName,
  playingState,
  gate
}
state *-- IdlePlayerState


@enduml
