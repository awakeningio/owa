@startuml
!include styles.puml

namespace nodejs.owa {
  class OWAController {
    Top level entity for controlling everything.
    Entry point, starts all sub-controllers.

    Store store
    soundController
    actionListener
    scController
    SerialInputController serialInputController
  }
  OWAController *-- redux.Store
  OWAController *-- SoundController
  OWAController *-- LightingController
  OWAController *-- SCController
  OWAController *-- SerialInputController

  class SCController {
    Handles starting and stopping the SuperCollider process.
  }
  SCController *-- redux.Store

  class SerialInputController {
    Takes button inputs from Arduino
  }
  SerialInputController *-- redux.Store

  class GUIInputController {
    
    Converts messages from gui UI into
    dispatched actions.

    oscActionListener
    store
  }
  OWAController o-- GUIInputController
  GUI_OSC_IN ()-- GUIInputController
  GUIInputController *-- OSCActionListener
  GUIInputController *-- redux.Store
  
  /'class ArduinoInputController {'/
    /'Converts arduino inputs to dispatched actions.'/

    /'serialport.SerialPort arduinoPort'/
    /'..'/
    /'+ handleButtonMessage(data)'/
  /'}'/
  /'OWAController o-- ArduinoInputController'/
  class OSCActionListener {
    Forward actions from osc.js to a redux state store.

    store
    oscSocket
  }
  OSCActionListener *-- redux.Store

  /'class AbletonLinkController {'/
    /'Creates an Ableton Link client and forwards the state to the'/
    /'store.'/

    /'linkStore'/
  /'}'/
  /'OWAController *-- AbletonLinkController'/
  /'AbletonLinkController *-- redux.Store'/

  class SoundController {
    Forwards state changes to SuperCollider and forwards dispatches from SC
    to the store.

    OSCActionListener actionListener
    store
    linkStore
  }
  SoundController *-- OSCActionListener
  SoundController *-- redux.Store
  SoundController "owa.api" -down-> quarks.owa.OWAController

  class LightingController {
    Top level controller for lighting.

    pixels
    segmentPixels
    levelPixels
    controllersToTick
    fcController
  }
  LightingController *-- FadecandyController
  LightingController *-- SegmentLightingController
  LightingController *-- redux.Store

  class FadecandyController {
    Handles Fadecandy connection
  }
  FadecandyController *-- redux.Store

  class SegmentLightingController {
    Manages lighting for a single segment (ring) on the OWA sculpture
  }
  SegmentLightingController *-- redux.Store
  SegmentLightingController *-- SegmentQueuedAnimation
  SegmentLightingController *-- SegmentPlayingAnimation

  class SegmentQueuedAnimation {
    Animation for a single segment when it is queued.
  }

  class SegmentPlayingAnimation {
    Animation / visualization for a single segment when it is playing.
  }





  /'class OSCActionDispatcher {'/
    /'redux middleware to dispatch actions via osc.js'/

    /'oscSocket'/
  /'}'/

  namespace gui {
    class OWAUIApp {
      Entry point for the GUI
    }
    OWAUIApp "GUI_OSC_IN" --> nodejs.owa.GUIInputController
  }

}

namespace quarks.owa {
  class OWAController {
    StateStore owaStateStore
    StateStore linkStateStore
    SessionTimingController sessionTimingController
    OWAClockController clockController
    AwakenedSequencerFactory seqFactory
    BufferManager bufManager
  }
  OWAController *-- quarks.supercollider_redux.StateStore
  OWAController *-- OWAClockController
  OWAController *-- quarks.awakening_sequencers.AwakenedSequencerFactory
  OWAController *-- quarks.cs_supercollider_lib.BufferManager
  /' 'TOOD: get rid of owa.api '/
  owa.api ()- OWAController

  class SessionTimingController {
    Handles scheduling auto transition between session phases
    
    TempoClock clock
    StateStore linkStore
  }
  OWAController *-- SessionTimingController
  SessionTimingController *-- quarks.supercollider_redux.StateStore

  class OWAClockController {
    StateStore store
    TempoClock clock
  }
  OWAClockController *-- quarks.supercollider_redux.StateStore
}

namespace quarks.cs_supercollider_lib {
  class BufferManager
}

namespace quarks.awakening_sequencers {
  class AwakenedSequencer {
    currentState
    clockController
    ReduxEventStreamPlayer streamPlayer
  }
  AwakenedSequencer *-- quarks.supercollider_redux.ReduxEventStreamPlayer


  class AwakenedSequencerFactory {
    AwakenedSequencer sequencers[]
  }
  AwakenedSequencerFactory *-- AwakenedSequencer
}

namespace quarks.supercollider_redux {
  class ReduxEventStreamPlayer {
    StateStore store;
  }
  ReduxEventStreamPlayer *-- StateStore

  class StateStore {
    
  }
}

@enduml
