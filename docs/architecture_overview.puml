@startuml

!include styles.puml

namespace owa {
  class OWAController {
    Top level entity for controlling everything.
    Entry point, starts all sub-controllers.

    OWAStateStore store
    inputController
    soundController
  }

  class SimulatorInputController {
    
    Converts messages from simulator UI into
    dispatched actions.

    oscActionListener
  }
  OWAController o-- SimulatorInputController
  
  /'class ArduinoInputController {'/
    /'Converts arduino inputs to dispatched actions.'/

    /'serialport.SerialPort arduinoPort'/
    /'..'/
    /'+ handleButtonMessage(data)'/
  /'}'/
  /'OWAController o-- ArduinoInputController'/
  
  class owaStateStore {
    Main state store for OWA app

    See data model for state tree.
  }

  class linkStateStore {
    A separate Redux state store for the Ableton Link state.  It changes
    very frequently and thus does not need to be in the same store.

    See data model for tree
  }

  class OSCActionListener {
    Forward actions from osc.js to a Redux state store.

    store
    oscSocket
  }

  class AbletonLinkController
  OWAController *-- AbletonLinkController
  class SoundController {
    Forwards state changes to SuperCollider and forwards dispatches from SC
    to the store.

    OSCActionListener actionListener
  }
  OWAController *-- SoundController
  SoundController *-- OSCActionListener

  /'class OSCActionDispatcher {'/
    /'Redux middleware to dispatch actions via osc.js'/

    /'oscSocket'/
  /'}'/

  namespace simulator {
    class OWAUIApp {
      Entry point for the GUI

    }
  }

  namespace quarks {
    namespace owa {
      class OWAController {
        StateStore owaStore
        StateStore linkStore
      }

      OWAController *-- StateStore
    }
  }

  
}



@enduml
